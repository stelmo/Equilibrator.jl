var documenterSearchIndex = {"docs":
[{"location":"functions/#Function-reference","page":"Function reference","title":"Function reference","text":"","category":"section"},{"location":"functions/","page":"Function reference","title":"Function reference","text":"Modules=[eQuilibrator]\nPages=[\"tools.jl\"]","category":"page"},{"location":"examples/#Example-usage","page":"Example usage","title":"Example usage","text":"","category":"section"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"The following examples follow closely the example usage  documented in equilibrator_api. Try running these examples!","category":"page"},{"location":"examples/#Basic-ΔG'-calculations","page":"Example usage","title":"Basic ΔG' calculations","text":"","category":"section"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"Load eQuilibrator.jl and Unitful. Then initialize the thermodynamic system as shown below.","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"using eQuilibrator\nusing Unitful\n\ntemp = 30u\"°C\"\ni_strength = 150.0u\"mM\"\nph=7.9\npmg = 2.0\n\nsystem = eQuilibrator.System(pH=ph, pMg=pmg, temperature=temp, ionic_strength=i_strength)","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"note: Take care of units\nUnits for temperature and ionic strength are required (pH and pMg are unitless floats). However, any suitable unit may be used, they are internally converted into Kelvin and molar respectively.","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"warning: Variable names\nWhile it is tempting to name a variable temperature or ionic_strength, these are exported functions and will be over-written if you assigned that name to a variable.","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"It is possible to change the state of the system after initialization.","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"temperature(system, 298.15u\"K\")\nionic_strength(system, 0.25u\"M\")\npH(system, 7.4)\npMg(system, 3.0)","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"It is necessary to supply a reaction string.","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"rxn_string = \"bigg.metabolite:atp + bigg.metabolite:h2o = bigg.metabolite:adp + bigg.metabolite:pi\"","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"After specifying the reaction string, it is a simple matter of calling the appropriate function  to get the ΔG values. ","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"physiological_dg_prime(system, rxn_string)\n\nstandard_dg_prime(system, rxn_string)\n\nconcens = Dict(\"bigg.metabolite:atp\"=>1u\"mM\", \"bigg.metabolite:adp\"=>100u\"μM\", \"bigg.metabolite:pi\"=>0.005u\"M\")\ndg_prime(system, rxn_string; concentrations=concens)\n\nln_reversibility_index(system, rxn_string)","category":"page"},{"location":"examples/","page":"Example usage","title":"Example usage","text":"!!! tip \"Errors are shown using Measurements.jl     eQuilibrator      supplies estimates with uncertainties, these are reflected by the use of a ± b with b being the uncertainty, assumed to be     one standard deviation here.","category":"page"},{"location":"installation/#Installation-instructions","page":"Installation","title":"Installation instructions","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"eQuilibrator.jl uses PyCall and Conda.jl to access equilibrator_api functions. First, ensure that you have installed both PyCall and Conda.jl using Julia's package manager:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"] add PyCall\n] add Conda","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Next, install equilibrator_api through Conda.jl:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Conda\n\nConda.add(\"equilibrator_api\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Then test if you can import equilibrator_api using PyCall:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using PyCall\n\neq = pyimport(\"equilibrator_api\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"If no errors occur, and the last command return something like PyObject <module 'equilibrator_api' from...  then you will be able to use eQuilibrator.jl after installing it:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"] add https://github.com/stelmo/eQuilibrator.jl.git","category":"page"},{"location":"#eQuilibrator.jl","page":"Home","title":"eQuilibrator.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"eQuilibrator.jl is a lightweight interface to the Python package equilibrator_api, which provides a programmatic way to make use of the functionality of eQuilibrator. This is particularly useful when one needs access to thermodynamic information about reactions or compounds. ","category":"page"}]
}
